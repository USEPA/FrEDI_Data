### Overwrite FrEDI data with past data
name: 3. Update Package Data (if tests passed)

on:
  workflow_dispatch:
    inputs:
      passed_tests:
        type: choice
        description: Did data pass tests?
        required: true
        options: 
        - no
        - yes
      module:
        type: choice
        description: Which module?
        required: true
        options:
        - fredi
        - extremes
        - ghg
        # - sv
      workflow_id:
        type: string
        description: Enter the run ID for the workflow from which to retrieve the module data
    

jobs:
  # This workflow contains a single job called "build"
  update_data:
    runs-on: ubuntu-latest
    name: Update Data
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
      
      - name: Setup R package dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          cache-version: 1
          packages: |
            any::tidyverse
            any::ggpubr
            any::openxlsx
            any::devtools
            any::admisc
            any::zoo
      
      # - name: Send test status
      #   run: echo "${{ github.event.inputs.passed_tests }}"
        
      - name: Send input status
        run: |
          echo "$${{ github.ref_name }} ${{ inputs.passed_tests }}  ${{ inputs.module }} ${{ inputs.workflow_id }}"  
      
      ### Download tmp_sysdata.rda from 1. Compile Main FrEDI Data run
      - name: Download all artifacts
        id:   download-artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # github-token: ${{ GITHUB_PAT }}
          run-id: ${{ inputs.workflow_id }}
          path: ./data
      - run: |
          pwd
          ls -R ./data/Data
      
      # - name: Copy Data
      #   if: |
      #     ${{ (( inputs.passed_tests == 'true' ) ||
      #         ( inputs.passed_tests == 'yes' ))
      #       }}
      #   run:  |
      #     cp ./data/Data/*.rda ./data/
      #     rm ./data/Data/*
      #     # rm ./data/sysdata.rda
      #     # cp ./data/Data/tmp_sysData.rda ./data/sysData.rda
      #     # rm ./data/Data/tmp_sysData.rda
      
          
      # github.event.inputs.passed_tests == 'true'
      - name: Add SV Data to sysdata
        if: |
          ${{ ( inputs.passed_tests == 'true' ) || 
            ( inputs.passed_tests == 'yes' ) }}
        run:  |
          Rscript -e '
            ### Arguments ----------------
            doFredi     <- module |> str_detect("fredi")
            doExtr      <- module |> str_detect("extremes")
            doGhg       <- module |> str_detect("ghg")
            doSv        <- module |> str_detect("sv")
            
            ### Set Up Environment ----------------
            #### Load Libraries ----------------
            require(tidyverse)
            require(devtools)
            
            ### Set Paths ----------------
            #### Directories ----------------
            projectDir  <- "."
            dataDir     <- projectDir |> file.path("data")
            frediDir    <- dataDir
            extrDir     <- dataDir |> file.path("extremes")
            ghgDir      <- dataDir |> file.path("ghg")
            svDir       <- dataDir |> file.path("sv")
            
            #### Filenames ----------------
            dataFile    <- "sysdata.rda"
            frediFile   <- "frediData.rda"
            extrFile    <- "extremesData.rda"
            ghgFile     <- "listMethane.rda"
            svFiles     <- svDir |> list.files(pattern="rda")
            
            #### Paths ----------------
            dataPath    <- dataDir  |> file.path(dataFile)
            frediPath   <- frediDir |> file.path(frediFile)
            extrPath    <- extrDir  |> file.path(extrFile)
            ghgPath     <- ghgDir   |> file.path(ghgFile)
            svPaths     <- svDir    |> file.path(svFiles)
            
            ### Copy Files ----------------
            ### Which file to copy
            fromPaths   <- projectDir |> file.path("data", "Data") |> list.files(pattern="rda", full.names=T)
            if(doSv) {toPaths <- svPaths}
            else     {toPaths <- case_when(doExtr ~ extrFile, doGhg ~ ghgPath, .default=frediPath) }
            fromPaths |> file.copy(to=toPaths)
  
            ### Add SV Data to sysdata.rda ----------------
            # ### Load functions
            # projectDir |> devtools::load_all()
            # ### Update data
            # tmpData     <- projectDir |> update_sysdata(
            #   dataPath  = dataDir,
            #   mainFile  = dataFile, 
            #   sv        = TRUE ,
            #   svPath    = svDir,
            #   svExt     = "rda", 
            #   save      = TRUE ,
            #   return    = FALSE
            # ) ### End update_sysdata
            
            ### Load Data ----------------
            #### Load main data
            dataPath |> load()
            
            #### Paths
            # allPaths    <- c(frediPath, extrPath, ghgPath, svPaths)
            # allNames    <- allPaths |> basename() |> str_replace("\\.rda", "")
            allPaths    <- toPaths
            allNames    <- toPaths |> basename() |> str_replace("\\.rda", "")
            
            #### Iterate over paths, loading data and assigning data to names
            listData    <- list(path0=allPaths, name0=allNames) |> map(function(path0, name0){
              path0 |> load(temp_env <- new.env())
              list0 <- temp_env |> as.list()
              obj0  <- list0[[name0]]
              rm(temp_env, list0)
              return(obj0)
            }) |> set_names(listData)
            for(name_i in allNames){name_i |> assign(listData[[name_i]])}

            ### Save Data ----------------
            # projectDir |> devtools::load_all()
            # ghgPath    <- ghgDir |> file.path(ghgFile)
            # ghgPath |> load()
            # save(rDataList, listMethane, svDataList, svPopList, format_styles, file=dataPath)
            save(frediData, extremesData, ghgData, svDataList, svPopList, format_styles, file=dataPath)
          '
      
      - name: Commit results
        if: |
          ${{ ( inputs.passed_tests == 'true' ) || 
            ( inputs.passed_tests == 'yes' ) }}
        run: |
          # Configure github
          git config --local core.autocrlf false
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name  "${{ github.actor }}"
          
          # Add data files
          git add ./data/*.rd*
          git add ./data/extremes/*.rd*
          git add ./data/ghg/*.rd*
          git add ./data/sv/*.rd*
          
          # Rebase files
          git pull origin ${{ github.head_ref }} --autostash --rebase -X ours

          # Check for staged changes
          if git diff --cached --quiet; then
            echo "No changes staged for commit."
          else
            echo "Some changes staged for commit."
            # Commit the changes
            commit_message="Auto-commit: Updated sysdata and added SV data to sysdata. Date: $(date '+%Y-%m-%d %H:%M:%S')"
            git commit -m "$commit_message"
            echo "Changes committed with message: '$commit_message'."
            git push
          fi
